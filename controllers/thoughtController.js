const{User:User,Thought:Thought}=require("../models");module.exports={getThoughts:async function(t,a){try{var o=await Thought.find();return a.json({thoughts:o})}catch(t){a.status(500).json(t)}},getSingleThought:async function(t,a){try{var o=await Thought.findById(t.params.thoughtId);if(!o)return a.status(404).json({message:"No thought with that ID"});a.json(o)}catch(t){a.status(500).json(t)}},createThought:async function(t,a){try{var o=await Thought.create(t.body);await User.findByIdAndUpdate(t.body.userId,{$push:{thoughts:o._id}},{new:!0}),a.json(o)}catch(t){a.status(500).json(t)}},updateThought:async function(t,a){try{var o=await Thought.findByIdAndUpdate(t.params.thoughtId,t.body,{new:!0});a.json(o)}catch(t){a.status(500).json(t)}},deleteThought:async function(t,a){try{await Thought.findByIdAndDelete(t.params.thoughtId),await User.findByIdAndUpdate({thoughts:t.params.thoughtId},{$pull:{thoughts:t.params.thoughtId}},{new:!0}),a.json({message:"Thought successfully deleted"})}catch(t){a.status(500).json(t)}},addReaction:async function(t,a){try{if(!await Thought.findOneAndUpdate({_id:t.params.thoughtId},{$addToSet:{reactions:t.body}}))return a.status(404).json({message:"No thought found with that ID :("});a.json("Reaction Added")}catch(t){a.status(500).json(t)}},removeReaction:async function(t,a){try{if(!await Thought.findOneAndUpdate({_id:t.params.thoughtId},{$pull:{reactions:{reactionId:t.body.reactionId}}}))return a.status(404).json({message:"No thought found with that ID :("});a.json("Reaction Removed")}catch(t){a.status(500).json(t)}}};